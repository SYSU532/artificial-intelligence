"use strict";
//AStar algorithm
function ArraySwapIndex(arr, indexA, indexB) {
    [arr[indexA], arr[indexB]] = [arr[indexB], arr[indexA]];
}
//Represent each node in the search graph, has reference to its parent
// and children node.
class node {
    constructor(state, currentBlank, parent) {
        this.parent = parent;
        this.state = Object.assign([], state);
        this.blankIndex = currentBlank;
        this.children = [];
        this.value = 0;
    }
    get identifier() {
        return this.state.toString();
    }
    getChildren() {
        if (this.children.length !== 0) {
            return this.children;
        }
        if (this.blankIndex % 3 !== 2) {
            //Blank move right
            let newState = Object.assign([], this.state);
            ArraySwapIndex(newState, this.blankIndex, this.blankIndex + 1);
            this.children.push(new node(newState, this.blankIndex + 1, this));
        }
        if (this.blankIndex % 3 !== 0) {
            //Blank move left
            let newState = Object.assign([], this.state);
            ArraySwapIndex(newState, this.blankIndex, this.blankIndex - 1);
            this.children.push(new node(newState, this.blankIndex - 1, this));
        }
        if (Math.floor(this.blankIndex / 3) !== 0) {
            //Blank move up
            let newState = Object.assign([], this.state);
            ArraySwapIndex(newState, this.blankIndex, this.blankIndex - 3);
            this.children.push(new node(newState, this.blankIndex - 3, this));
        }
        if (Math.floor(this.blankIndex / 3) !== 2) {
            //Blank move down
            let newState = Object.assign([], this.state);
            ArraySwapIndex(newState, this.blankIndex, this.blankIndex + 3);
            this.children.push(new node(newState, this.blankIndex + 3, this));
        }
        return this.children;
    }
}
class searchMethod {
    constructor(initState, currentBlank) {
        this.openTable = [];
        this.closedTable = {};
        this.currentNode = new node(initState, currentBlank, null);
        this.openTable.push(this.currentNode);
        this.next();
        this.totalStep = 0;
    }
    next() {
        if (this.checkResult(this.currentNode.state)) {
            return [this.currentNode.state, this.currentNode.blankIndex];
        }
        this.totalStep++;
        let [newNode, index] = this.getLowestNode();
        while (newNode.identifier in this.closedTable) {
            this.openTable.splice(index, 1);
            [newNode, index] = this.getLowestNode();
        }
        this.openTable.splice(index, 1);
        this.closedTable[newNode.identifier] = newNode;
        this.currentNode = newNode;
        let children = this.currentNode.getChildren();
        for (let child of children) {
            this.addNewOpenNode(child);
        }
        return [newNode.state, newNode.blankIndex];
    }
    runAll() {
        while (true) {
            let [state, blank] = this.next();
            if (this.checkResult(state)) {
                break;
            }
        }
    }
    checkResult(state) {
        for (let i = 0; i < 9; i++) {
            if (state[i] !== i) {
                return false;
            }
        }
        return true;
    }
    get pathToCurrent() {
        let result = [];
        let curr = this.currentNode;
        while (curr !== null) {
            result.unshift(curr);
            curr = curr.parent;
        }
        return result;
    }
    get steps() { return this.totalStep; }
}
class aStarH1 extends searchMethod {
    getLowestNode() {
        return [this.openTable[0], 0];
    }
    addNewOpenNode(newNode) {
        this.openTable.push(newNode);
    }
}
class aStarH2 extends searchMethod {
    getLowestNode() {
        return [this.openTable[0], 0];
    }
    addNewOpenNode(newNode) {
        this.openTable.push(newNode);
    }
}
class bfs extends searchMethod {
    getLowestNode() {
        return [this.openTable[0], 0];
    }
    addNewOpenNode(newNode) {
        if (!(newNode.identifier in this.closedTable)) {
            this.openTable.push(newNode);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,