"use strict";
//AStar algorithm
/// <reference path="./priority-queue.d.ts" />
function ArraySwapIndex(arr, indexA, indexB) {
    [arr[indexA], arr[indexB]] = [arr[indexB], arr[indexA]];
}
//Represent each node in the search graph, has reference to its parent
// and children node.
class node {
    constructor(state, currentBlank, parent) {
        this.parent = parent;
        this.state = state.slice();
        this.blankIndex = currentBlank;
        this.children = [];
        this.value = 0;
    }
    get identifier() {
        return this.state.toString();
    }
    get path() {
        let result = [];
        let curr = this;
        while (curr !== null) {
            result.unshift(curr);
            curr = curr.parent;
        }
        return result;
    }
    getChildren() {
        if (this.children.length !== 0) {
            return this.children;
        }
        if (this.blankIndex % 3 !== 2) {
            //Blank move right
            let newState = this.state.slice();
            ArraySwapIndex(newState, this.blankIndex, this.blankIndex + 1);
            this.children.push(new node(newState, this.blankIndex + 1, this));
        }
        if (this.blankIndex % 3 !== 0) {
            //Blank move left
            let newState = this.state.slice();
            ArraySwapIndex(newState, this.blankIndex, this.blankIndex - 1);
            this.children.push(new node(newState, this.blankIndex - 1, this));
        }
        if (Math.floor(this.blankIndex / 3) !== 0) {
            //Blank move up
            let newState = this.state.slice();
            ArraySwapIndex(newState, this.blankIndex, this.blankIndex - 3);
            this.children.push(new node(newState, this.blankIndex - 3, this));
        }
        if (Math.floor(this.blankIndex / 3) !== 2) {
            //Blank move down
            let newState = this.state.slice();
            ArraySwapIndex(newState, this.blankIndex, this.blankIndex + 3);
            this.children.push(new node(newState, this.blankIndex + 3, this));
        }
        return this.children;
    }
}
class searchMethod {
    constructor(initState, currentBlank) {
        this.openTable = new PriorityQueue({
            comparator: function (a, b) {
                return a.value - b.value;
            },
        });
        this.closedTable = {};
        this.currentNode = new node(initState, currentBlank, null);
        this.openTable.queue(this.currentNode);
        this.next();
        this.totalStep = 0;
    }
    next() {
        if (this.checkResult(this.currentNode.state)) {
            return [this.currentNode.state, this.currentNode.blankIndex];
        }
        this.totalStep++;
        if (this.openTable.length === 0) {
            alert("搜索失败");
            throw "Empty open table";
        }
        let newNode = this.openTable.peek();
        while ((newNode).identifier in this.closedTable) {
            this.openTable.dequeue();
            if (this.openTable.length === 0) {
                alert("搜索失败");
                throw "Empty open table";
            }
            newNode = this.openTable.peek();
        }
        this.openTable.dequeue();
        this.closedTable[newNode.identifier] = newNode;
        this.currentNode = newNode;
        let children = this.currentNode.getChildren();
        for (let child of children) {
            this.addNewOpenNodeWithVal(child);
        }
        return [newNode.state, newNode.blankIndex];
    }
    getLowestNode() {
        return this.openTable.peek();
    }
    runAll() {
        while (true) {
            let [state, blank] = this.next();
            if (this.checkResult(state)) {
                break;
            }
        }
    }
    checkResult(state) {
        for (let i = 0; i < 9; i++) {
            if (state[i] !== i) {
                return false;
            }
        }
        return true;
    }
    get pathToCurrent() {
        return this.currentNode.path;
    }
    get steps() { return this.totalStep; }
}
class aStarH1 extends searchMethod {
    addNewOpenNodeWithVal(newNode) {
        if (!(newNode.identifier in this.closedTable)) {
            //The cost from root to the current node, i.e g*(n)
            let currentCost = newNode.path.length;
            //The cost from current node to destination(h1*(n)) is estimated
            //by the number of misplaced numbers.
            let estimatedMinCost = 0;
            for (let i = 0; i < newNode.state.length; i++) {
                if (newNode.state[i] !== i) {
                    estimatedMinCost += 1;
                }
            }
            newNode.value = currentCost + estimatedMinCost;
            this.openTable.queue(newNode);
        }
    }
}
class aStarH2 extends searchMethod {
    addNewOpenNodeWithVal(newNode) {
        if (!(newNode.identifier in this.closedTable)) {
            //The cost from root to the current node, i.e g*(n)
            let currentCost = newNode.path.length;
            //The cost from current node to destination(h1*(n)) is estimated
            //by the sum of the column and row differences in each position.
            let estimatedMinCost = 0;
            for (let i = 0; i < newNode.state.length; i++) {
                //Row differences
                estimatedMinCost += Math.abs(i / 3 - newNode.state[i] / 3);
                //Column differences
                estimatedMinCost += Math.abs(i % 3 - newNode.state[i] % 3);
            }
            newNode.value = currentCost + estimatedMinCost;
            this.openTable.queue(newNode);
        }
    }
}
class bfs extends searchMethod {
    addNewOpenNodeWithVal(newNode) {
        if (!(newNode.identifier in this.closedTable)) {
            newNode.value = newNode.parent.value + 1;
            this.openTable.queue(newNode);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,